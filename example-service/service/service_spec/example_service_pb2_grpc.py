# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from service.service_spec import example_service_pb2 as example__service__pb2


class CalculatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add = channel.unary_unary(
                '/example_service.Calculator/add',
                request_serializer=example__service__pb2.Numbers.SerializeToString,
                response_deserializer=example__service__pb2.Result.FromString,
                )
        self.sub = channel.unary_unary(
                '/example_service.Calculator/sub',
                request_serializer=example__service__pb2.Numbers.SerializeToString,
                response_deserializer=example__service__pb2.Result.FromString,
                )
        self.mul = channel.unary_unary(
                '/example_service.Calculator/mul',
                request_serializer=example__service__pb2.Numbers.SerializeToString,
                response_deserializer=example__service__pb2.Result.FromString,
                )
        self.div = channel.unary_unary(
                '/example_service.Calculator/div',
                request_serializer=example__service__pb2.Numbers.SerializeToString,
                response_deserializer=example__service__pb2.Result.FromString,
                )


class CalculatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def add(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mul(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def div(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalculatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add': grpc.unary_unary_rpc_method_handler(
                    servicer.add,
                    request_deserializer=example__service__pb2.Numbers.FromString,
                    response_serializer=example__service__pb2.Result.SerializeToString,
            ),
            'sub': grpc.unary_unary_rpc_method_handler(
                    servicer.sub,
                    request_deserializer=example__service__pb2.Numbers.FromString,
                    response_serializer=example__service__pb2.Result.SerializeToString,
            ),
            'mul': grpc.unary_unary_rpc_method_handler(
                    servicer.mul,
                    request_deserializer=example__service__pb2.Numbers.FromString,
                    response_serializer=example__service__pb2.Result.SerializeToString,
            ),
            'div': grpc.unary_unary_rpc_method_handler(
                    servicer.div,
                    request_deserializer=example__service__pb2.Numbers.FromString,
                    response_serializer=example__service__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'example_service.Calculator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Calculator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example_service.Calculator/add',
            example__service__pb2.Numbers.SerializeToString,
            example__service__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example_service.Calculator/sub',
            example__service__pb2.Numbers.SerializeToString,
            example__service__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mul(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example_service.Calculator/mul',
            example__service__pb2.Numbers.SerializeToString,
            example__service__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def div(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example_service.Calculator/div',
            example__service__pb2.Numbers.SerializeToString,
            example__service__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
